{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","bind","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iWAIaA,G,MAAO,SAAAC,GAChB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,4BAAML,EAAMI,QAAQE,MACpB,2BAAKN,EAAMI,QAAQG,UCAlBC,G,MAAW,SAAAR,GAGpB,OACI,yBAAKC,UAAU,aASXD,EAAMS,SAASC,IAAI,SAAAN,GAAO,OACtB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SClBnCQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACAb,UAAU,SACVc,KAAK,SACLF,YAAcA,EACdG,SAAWF,MCqEAG,G,kBA/DX,aAAc,IAAD,8BAET,+CAmBJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAlBrC,EAAKC,MAAQ,CACTd,SAAU,GACVW,YAAa,IAWjB,EAAKN,aAAe,EAAKA,aAAaU,KAAlB,gBAjBX,E,iFA2BO,IAAD,OAGfC,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAG,EAAKV,SAAS,CAACV,SAAUoB,Q,+BAGlC,IAAD,EAC8BC,KAAKP,MAA/Bd,EADJ,EACIA,SAAUW,EADd,EACcA,YAMZW,EAAmBtB,EAASuB,OAAO,SAAA5B,GAAO,OAC5CA,EAAQE,KAAK2B,cAAcC,SAASd,EAAYa,iBACpD,OACI,yBAAKhC,UAAU,OACX,+CACA,kBAAC,EAAD,CACIY,YAAY,kBACZC,aAAcgB,KAAKhB,eAKvB,kBAAC,EAAD,CACIL,SAAUsB,S,GAzDZI,cCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.809cc26c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\n\r\nexport const Card = props => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n            <h2>{ props.monster.name }</h2>\r\n            <p>{ props.monster.email }</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport {Card} from '../card/card.component';\r\n\r\nimport './card-list.style.css';\r\n\r\n\r\n// Tạo một react component với cú pháp arrow function,\r\n// nhận tham số props\r\nexport const CardList = props => {\r\n    // console.log(props);\r\n    // children là một thuộc tính sẵn có trong tham số props.\r\n    return (\r\n        <div className='card-list'>\r\n            {\r\n            // Đoạn code này tạo ra một danh sách các JSX element\r\n            // của react.\r\n            // Hàm map nhận đối số là một function, function\r\n            // này sẽ được kích hoạt trên từng phần tử trong \r\n            // thuộc tính monsters.\r\n            // Thuộc tính key giúp react phân biệt các phần tử\r\n            // h1 được kết xuất để dễ dàng cập nhật về sau.\r\n            props.monsters.map(monster => (\r\n                <Card key={monster.id} monster={monster}></Card>\r\n            ))\r\n            }\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\n// Sử dụng cú pháp Destructuring\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n    className='search' \r\n    type='search' \r\n    placeholder={ placeholder } \r\n    onChange={ handleChange }\r\n    />\r\n);\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\n// // Function này trả về một react component dạng function.\n// function App() {\n  \n// }\n\n// Dây là một react component dạng class\nclass App extends Component {\n    // Hàm tạo\n    constructor(){\n        // Gọi hàm tạo của lớp cha (Component class)\n        super();\n        // Tạo state cho class hiện hành (App class)\n        this.state = {\n            monsters: [],\n            searchField: ''\n        }\n\n        // Ngay khi component vừa được khởi tạo,\n        // kích hoạt lệnh này để react ràng buộc ngữ cảnh từ khóa\n        // this với hàm handleChange. Hàm bind là một phương thức\n        // sẽ có trên mọi hàm (bao gồm cả hàm tự định nghĩa) và\n        // nó trả về một hàm được ràng buộc với ngữ cảnh của từ\n        // khóa this. Lệnh này làm cho từ khóa this có thể được\n        // sử dụng bên trong phương thức tự định nghĩa và tham chiếu\n        // đến ngữ cảnh là class hiện hành.\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    // \n    handleChange = (e) => {\n        this.setState({searchField: e.target.value});\n    }\n\n    // Đây là một react component lifecycle method, được kích hoạt\n    // ngay sau khi component đã được mount vào DOM\n    componentDidMount(){\n        // fetch là một navtive JS function để kích hoạt một API\n        // và trả về một promise\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users=> this.setState({monsters: users}));\n    }\n\n    render(){\n        const { monsters, searchField } = this.state;\n        // filter là một array method. Hàm này xử lý lọc từng phần\n        // tử trong mảng kích hoạt nó và nhận đối số là một function\n        // để xử lý lọc.\n        // Hàm include kiểm tra xem chuỗi đối số có nằm trong \n        // chuỗi kích hoạt hàm không.\n        const filteredMonsters = monsters.filter(monster => \n            monster.name.toLowerCase().includes(searchField.toLowerCase()));\n        return (\n            <div className=\"App\">\n                <h1>Monster Rolodex</h1>\n                <SearchBox \n                    placeholder='Search monsters' \n                    handleChange={this.handleChange}\n                />\n                {\n                // Thuộc tính monsters sẽ được đặt vào tham số props của CardList.\n                }\n                <CardList \n                    monsters={filteredMonsters}\n                />\n                \n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n// App được định nghĩa bằng một function trả về một HTML block.\n// Hàm render sẽ thay thế phần tử HTML có id là root bằng App,\n// phần tử đó nằm trong file /public/index.html\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}